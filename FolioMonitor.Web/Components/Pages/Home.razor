@page "/"
@inject IHttpClientFactory HttpClientFactory
@using System.Net.Http.Json
@using FolioMonitor.Core.Models.DTOs
@using System.Linq

<PageTitle>Folio Monitor Dashboard</PageTitle>

<h1>Folio Monitor Dashboard</h1>

@if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        Error fetching data: @errorMessage
    </div>
}
else if (groupedStoreData == null)
{
    <p><em>Loading...</em></p>
}
else if (!groupedStoreData.Any())
{
     <p><em>No folio data found.</em></p>
}
else
{
    @foreach (var storeData in groupedStoreData.OrderBy(s => s.StoreCode))
    {
        <div class="card mb-4">
            @* Updated Card Header with Flexbox for layout *@
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                 <h2 class="mb-0">Store: @storeData.StoreCode</h2>
                 <span class="text-white-50">Monitored At (MX): @ConvertToMexicoCityTime(storeData.LatestTimestamp).ToString("yyyy-MM-dd HH:mm:ss")</span>
            </div>
            <div class="card-body">
                @* --- Invoice Section for this Store --- *@
                <h4>Invoice Status</h4>
                @if (storeData.InvoiceSeries.Any())
                {
                    <h5 class="card-title mb-2">Total Available: @storeData.InvoiceSeries.Sum(s => s.FoliosDisponibles)</h5>
                    <table class="table table-sm table-striped table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>Store Code</th> 
                                <th>Start</th>
                                <th>End</th>
                                <th>Current</th>
                                <th>Available</th>
                                <th>Source Updated</th>
                                <th>Activo</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var series in storeData.InvoiceSeries.OrderByDescending(s => s.Timestamp))
                            {
                                <tr class="@(GetRowClass(series.FoliosDisponibles))">
                                    <td>@series.CodigoSucursal</td> 
                                    <td>@series.FolioInicio</td>
                                    <td>@series.FolioFin</td>
                                    <td>@(series.FolioActual?.ToString() ?? "N/A")</td>
                                    <td>@series.FoliosDisponibles</td>
                                    <td>@(series.FechaActualizacion?.ToString("yyyy-MM-dd HH:mm:ss") ?? "N/A")</td>
                                    <td>@(series.Activo ? "Yes" : "No")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p><em>No active invoice series found for this store.</em></p>
                }

                <hr /> @* Separator *@

                @* --- Credit Note Section for this Store --- *@
                 <h4>Credit Note Status</h4>
                 @if (storeData.CreditNoteSeries.Any())
                 {
                    <h5 class="card-title mb-2">Total Available: @storeData.CreditNoteSeries.Sum(s => s.FoliosDisponibles)</h5>
                    <table class="table table-sm table-striped table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>Store Code</th> 
                                <th>Start</th>
                                <th>End</th>
                                <th>Current</th>
                                <th>Available</th>
                                <th>Source Updated</th>
                                <th>Activo</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var series in storeData.CreditNoteSeries.OrderByDescending(s => s.Timestamp))
                            {
                                <tr class="@(GetRowClass(series.FoliosDisponibles))">
                                    <td>@series.CodigoSucursal</td>
                                    <td>@series.FolioInicio</td>
                                    <td>@series.FolioFin</td>
                                    <td>@(series.FolioActual?.ToString() ?? "N/A")</td>
                                    <td>@series.FoliosDisponibles</td>
                                    <td>@(series.FechaActualizacion?.ToString("yyyy-MM-dd HH:mm:ss") ?? "N/A")</td>
                                    <td>@(series.Activo ? "Yes" : "No")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                 }
                 else
                 {
                      <p><em>No active credit note series found for this store.</em></p>
                 }
                 
                 <hr /> @* Separator before rates for this store *@
                 
                 @* --- Consumption Rate Section for this Store --- START *@
                 <h4>Consumption Rate (Average)</h4>
                 @if (ratesDataByStore != null && ratesDataByStore.TryGetValue(storeData.StoreCode, out var currentStoreRates) && currentStoreRates.Any())
                 {
                     <table class="table table-sm table-striped table-bordered mt-2">
                        <thead class="thead-dark">
                            <tr>
                                <th>Document Type</th> @* Added column *@
                                <th>Module</th>
                                <th>Interval</th>
                                <th>Total Consumed</th>
                                <th>Avg. Rate (Folios/Day)</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var rate in currentStoreRates.OrderBy(r => r.Modulo)) @* Order by module within store *@
                            {
                                <tr>
                                    <td>@MapModuloToDocumentType(rate.Modulo)</td> @* Use helper *@
                                    <td>@rate.Modulo</td>
                                    <td>
                                        @rate.RateIntervalDescription
                                        <br/>
                                        <small>(@rate.IntervalStartTime.ToString("dd/MM HH:mm") - @rate.IntervalEndTime.ToString("dd/MM HH:mm"))</small>
                                    </td>
                                    <td>@(rate.FoliosConsumed?.ToString() ?? "N/A")</td>
                                    <td>@(rate.CalculatedRate?.ToString("F2") ?? "N/A")</td> 
                                    <td>@rate.CalculationNotes</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                 }
                 else
                 {
                    <p><em>No consumption rate data available for this store. (Ensure worker has run at least twice.)</em></p>
                 }
                 @* --- Consumption Rate Section for this Store --- END *@
                 
            </div> @* End card-body *@
        </div> @* End card *@
    }
}

@code {
    // Class to hold grouped data for the view
    private class StoreDisplayData
    {
        public string StoreCode { get; set; } = string.Empty;
        public DateTime LatestTimestamp { get; set; } // Store the latest timestamp for the header
        public List<FolioSeriesDto> InvoiceSeries { get; set; } = new List<FolioSeriesDto>();
        public List<FolioSeriesDto> CreditNoteSeries { get; set; } = new List<FolioSeriesDto>();
    }

    private List<StoreDisplayData>? groupedStoreData;
    // Change ratesData to a Dictionary keyed by StoreCode
    private Dictionary<string, List<FolioRateDto>>? ratesDataByStore;
    private string? errorMessage;
    private TimeZoneInfo? mexicoCityTimeZone;

    protected override async Task OnInitializedAsync()
    {
        // Try to find the Mexico City time zone
        try
        {
            // Use IANA ID first, fallback to Windows ID if needed
            mexicoCityTimeZone = TimeZoneInfo.FindSystemTimeZoneById("America/Mexico_City") 
                                 ?? TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time (Mexico)");
        }
        catch (TimeZoneNotFoundException)
        {
            Console.Error.WriteLine("Mexico City time zone not found on this system.");
            // Handle error or default to UTC? For now, conversion will fail gracefully.
        }
        catch (Exception ex)
        {
             Console.Error.WriteLine($"Error finding time zone: {ex.Message}");
        }

        var client = HttpClientFactory.CreateClient("FolioApiClient");
        try
        {
            var summaries = await client.GetFromJsonAsync<List<FolioSummaryDto>>("api/folios/summary");

            if (summaries != null)
            {
                var allSeries = summaries.SelectMany(s => s.Series);
                
                groupedStoreData = allSeries
                    .GroupBy(s => s.CodigoSucursal) 
                    .Select(g => new StoreDisplayData
                    {
                        StoreCode = g.Key,
                        // Find the absolute latest timestamp for this store across all series
                        LatestTimestamp = g.Max(s => s.Timestamp), 
                        InvoiceSeries = g.Where(s => s.Modulo == "MOD28").ToList(),
                        CreditNoteSeries = g.Where(s => s.Modulo == "MOD29").ToList()
                    })
                    .ToList();
            }
            else
            {
                 groupedStoreData = new List<StoreDisplayData>(); 
            }

            // --- Fetch Rate Data ---
            var flatRatesData = await client.GetFromJsonAsync<List<FolioRateDto>>("api/folios/consumption-rates");
            if (flatRatesData != null)
            {
                 // Group the fetched rates by Store Code
                 ratesDataByStore = flatRatesData
                     .GroupBy(r => r.CodigoSucursal)
                     .ToDictionary(g => g.Key, g => g.ToList());
            }
            else
            {
                ratesDataByStore = new Dictionary<string, List<FolioRateDto>>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching data: {ex.Message}"; 
            Console.Error.WriteLine($"Error fetching or processing folio data: {ex}"); 
        }
    }

    private DateTime ConvertToMexicoCityTime(DateTime utcDateTime)
    {
        if (mexicoCityTimeZone == null) return utcDateTime; // Return UTC if timezone not found
        
        // Ensure the input DateTime kind is UTC
        if (utcDateTime.Kind == DateTimeKind.Unspecified)
        {
             utcDateTime = DateTime.SpecifyKind(utcDateTime, DateTimeKind.Utc);
        }
        else if (utcDateTime.Kind == DateTimeKind.Local)
        {
            utcDateTime = utcDateTime.ToUniversalTime();
        }

        return TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, mexicoCityTimeZone);
    }

    private string GetRowClass(int available)
    {
        // Basic coloring logic - enhance as needed
        if (available <= 20) return "table-danger";
        if (available <= 100) return "table-warning";
        return ""; // Default or table-success
    }
    
    // Add this helper method (copied from FoliosController)
    private string MapModuloToDocumentType(string modulo)
    {
        return modulo switch
        {
            "MOD28" => "Invoice",
            "MOD29" => "Credit Note",
            _ => "Unknown"
        };
    }
}
